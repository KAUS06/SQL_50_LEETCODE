#LEETCODE
#SQL 50
#7: 1068. Product Sales Analysis I

Table: Sales

+-------------+-------+
| Column Name | Type  |
+-------------+-------+
| sale_id     | int   |
| product_id  | int   |
| year        | int   |
| quantity    | int   |
| price       | int   |
+-------------+-------+
(sale_id, year) is the primary key (combination of columns with unique values) of this table.
product_id is a foreign key (reference column) to Product table.
Each row of this table shows a sale on the product product_id in a certain year.
Note that the price is per unit.
 

Table: Product

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     |
| product_name | varchar |
+--------------+---------+
product_id is the primary key (column with unique values) of this table.
Each row of this table indicates the product name of each product.
 

Write a solution to report the product_name, year, and price for each sale_id in the Sales table.

Return the resulting table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+
Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+
Output: 
+--------------+-------+-------+
| product_name | year  | price |
+--------------+-------+-------+
| Nokia        | 2008  | 5000  |
| Nokia        | 2009  | 5000  |
| Apple        | 2011  | 9000  |
+--------------+-------+-------+
Explanation: 
From sale_id = 1, we can conclude that Nokia was sold for 5000 in the year 2008.
From sale_id = 2, we can conclude that Nokia was sold for 5000 in the year 2009.
From sale_id = 7, we can conclude that Apple was sold for 9000 in the year 2011.

Solution:
select p.product_name,s.year ,s.price from sales s 
left join product p 
on s.product_id=p.product_id

Explanation:
SELECT p.product_name, s.year, s.price:

This specifies the columns that you want to retrieve from the database.
p.product_name: This selects the product_name from the product table.
s.year: This selects the year from the sales table.
s.price: This selects the price from the sales table.
The selected columns will be included in the final result set.
FROM sales s:

This indicates that the primary table for the query is sales.
The alias s is used for the sales table, allowing for easier reference throughout the query.
LEFT JOIN product p:

This part of the query joins the product table to the sales table using a LEFT JOIN.
LEFT JOIN ensures that all records from the left table (sales in this case) are included in the result set, even if there are no matching records in the right table (product).
The alias p is used for the product table for easier reference.
ON s.product_id = p.product_id:

This specifies the condition for the join. It tells the database how to relate the two tables.
The query matches rows from the sales table (using s.product_id) with rows from the product table (using p.product_id).
If a product exists in the sales table but not in the product table, the query will still return the sales record, but the product_name will be NULL.
