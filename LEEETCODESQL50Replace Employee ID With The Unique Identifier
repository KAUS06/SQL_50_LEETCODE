#LEETCODE
#SQL 50
#6 : 1378. Replace Employee ID With The Unique Identifier

Table: Employees

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains the id and the name of an employee in a company.
 

Table: EmployeeUNI

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| unique_id     | int     |
+---------------+---------+
(id, unique_id) is the primary key (combination of columns with unique values) for this table.
Each row of this table contains the id and the corresponding unique id of an employee in the company.
 

Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Employees table:
+----+----------+
| id | name     |
+----+----------+
| 1  | Alice    |
| 7  | Bob      |
| 11 | Meir     |
| 90 | Winston  |
| 3  | Jonathan |
+----+----------+
EmployeeUNI table:
+----+-----------+
| id | unique_id |
+----+-----------+
| 3  | 1         |
| 11 | 2         |
| 90 | 3         |
+----+-----------+
Output: 
+-----------+----------+
| unique_id | name     |
+-----------+----------+
| null      | Alice    |
| null      | Bob      |
| 2         | Meir     |
| 3         | Winston  |
| 1         | Jonathan |
+-----------+----------+
Explanation: 
Alice and Bob do not have a unique ID, We will show null instead.
The unique ID of Meir is 2.
The unique ID of Winston is 3.
The unique ID of Jonathan is 1.

Solution:
SELECT 
    u.unique_id,
    e.name 
FROM 
    Employees e
LEFT JOIN 
    EmployeeUNI u ON e.id = u.id;

Explanation:
SELECT u.unique_id, e.name:

This part specifies the columns you want to retrieve from the database.
u.unique_id: This retrieves the unique ID from the EmployeeUNI table.
e.name: This retrieves the name of the employee from the Employees table.
FROM Employees e:

This specifies the main table you are querying, which is the Employees table.
The alias e is used here for convenience, allowing you to reference the Employees table more easily in the rest of the query.
LEFT JOIN EmployeeUNI u ON e.id = u.id:

LEFT JOIN: This type of join includes all records from the left table (Employees in this case) and the matched records from the right table (EmployeeUNI). If there is no match, it will still return the row from the left table, but with NULL values for the right tableâ€™s columns.
EmployeeUNI u: This is the second table that you are joining, and it is aliased as u.
ON e.id = u.id: This specifies the condition for the join, indicating that you want to match records where the id in the Employees table is equal to the id in the EmployeeUNI table
