#LEETCODE
#SQL 50
#4: 1148. Article Views I

Table: Views

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| article_id    | int     |
| author_id     | int     |
| viewer_id     | int     |
| view_date     | date    |
+---------------+---------+
There is no primary key (column with unique values) for this table, the table may have duplicate rows.
Each row of this table indicates that some viewer viewed an article (written by some author) on some date. 
Note that equal author_id and viewer_id indicate the same person.
 

Write a solution to find all the authors that viewed at least one of their own articles.

Return the result table sorted by id in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Views table:
+------------+-----------+-----------+------------+
| article_id | author_id | viewer_id | view_date  |
+------------+-----------+-----------+------------+
| 1          | 3         | 5         | 2019-08-01 |
| 1          | 3         | 6         | 2019-08-02 |
| 2          | 7         | 7         | 2019-08-01 |
| 2          | 7         | 6         | 2019-08-02 |
| 4          | 7         | 1         | 2019-07-22 |
| 3          | 4         | 4         | 2019-07-21 |
| 3          | 4         | 4         | 2019-07-21 |
+------------+-----------+-----------+------------+
Output: 
+------+
| id   |
+------+
| 4    |
| 7    |
+------+

Solution:
select DISTINCT author_id as id from views where author_id=viewer_id order by id ; 

Explanation:
SELECT DISTINCT author_id AS id:

SELECT: This keyword is used to specify the columns that you want to retrieve from the database.
DISTINCT: This keyword ensures that the results returned are unique. If there are multiple entries for the same author_id, it will return only one instance of that value.
author_id AS id: This part selects the author_id column from the views table and renames it to id in the result set. This is useful for clarity or to avoid naming conflicts.
FROM views:

This specifies the table from which to retrieve the data, in this case, the views table.
WHERE author_id = viewer_id:

The WHERE clause is a filter that specifies the conditions under which rows will be selected. Here, it filters the results to include only those rows where the author_id is equal to the viewer_id. This condition implies that you are looking for instances where the viewer is also the author.
ORDER BY id:

This clause sorts the results based on the id (which is the same as author_id). By default, the order is ascending, meaning the smallest values will appear first. Sorting helps in organizing the output for easier interpretation.
Use Case:
This query might be useful in scenarios where you want to identify authors who have viewed their own content or interactions in a system where authors can also be viewers. By using DISTINCT, it ensures that you get a list of unique author IDs without duplicates.
