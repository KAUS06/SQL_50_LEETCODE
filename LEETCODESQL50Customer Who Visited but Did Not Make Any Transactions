#LEETCODE
#SQL 50
#8:1581.Customer Who Visited but Did Not Make Any Transactions

Table: Visits

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| visit_id    | int     |
| customer_id | int     |
+-------------+---------+
visit_id is the column with unique values for this table.
This table contains information about the customers who visited the mall.
 

Table: Transactions

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| transaction_id | int     |
| visit_id       | int     |
| amount         | int     |
+----------------+---------+
transaction_id is column with unique values for this table.
This table contains information about the transactions made during the visit_id.
 

Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.

Return the result table sorted in any order.

The result format is in the following example.

 

Example 1:

Input: 
Visits
+----------+-------------+
| visit_id | customer_id |
+----------+-------------+
| 1        | 23          |
| 2        | 9           |
| 4        | 30          |
| 5        | 54          |
| 6        | 96          |
| 7        | 54          |
| 8        | 54          |
+----------+-------------+
Transactions
+----------------+----------+--------+
| transaction_id | visit_id | amount |
+----------------+----------+--------+
| 2              | 5        | 310    |
| 3              | 5        | 300    |
| 9              | 5        | 200    |
| 12             | 1        | 910    |
| 13             | 2        | 970    |
+----------------+----------+--------+
Output: 
+-------------+----------------+
| customer_id | count_no_trans |
+-------------+----------------+
| 54          | 2              |
| 30          | 1              |
| 96          | 1              |
+-------------+----------------+
Explanation: 
Customer with id = 23 visited the mall once and made one transaction during the visit with id = 12.
Customer with id = 9 visited the mall once and made one transaction during the visit with id = 13.
Customer with id = 30 visited the mall once and did not make any transactions.
Customer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.
Customer with id = 96 visited the mall once and did not make any transactions.
As we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions.

Solution:
SELECT v.customer_id, COUNT(v.visit_id) AS count_no_trans 
from Visits v 
LEFT JOIN Transactions t 
ON v.visit_id = t.visit_id  
WHERE t.amount IS NULL 
GROUP BY v.customer_id;

Explanation:
SELECT v.customer_id, COUNT(v.visit_id) AS count_no_trans:

This part of the query specifies the columns to retrieve.
v.customer_id: This selects the customer_id from the Visits table.
COUNT(v.visit_id) AS count_no_trans: This counts the number of visit_id entries for each customer and names this count as count_no_trans. This will tell us how many visits each customer made that did not result in a transaction.
FROM Visits v:

This indicates that the primary table for the query is Visits, and it is aliased as v for easier reference.
LEFT JOIN Transactions t:

This joins the Transactions table to the Visits table using a LEFT JOIN. This means:
All records from the Visits table are included in the result, regardless of whether there is a matching record in the Transactions table.
ON v.visit_id = t.visit_id:

This specifies the condition for the join, indicating how to match records between the two tables. It links the two tables based on visit_id.
WHERE t.amount IS NULL:

This clause filters the results to include only those records where there is no corresponding transaction. Since we are using a LEFT JOIN, if there is no match in the Transactions table, the columns from Transactions (including amount) will be NULL. This condition ensures that we are only counting visits that did not result in any transaction.
GROUP BY v.customer_id:

This groups the results by customer_id, allowing the COUNT function to calculate the number of visits for each customer that did not lead to a transaction.
Result:
The output will contain two columns:
customer_id: The ID of each customer.
count_no_trans: The count of visits for that customer where no transaction occurred.
